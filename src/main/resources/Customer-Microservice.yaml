openapi: 3.0.0
info:
  title: Customer Service API
  description: API para manejar la información de los clientes del banco
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: Servidor local
tags:
  - name: Customers
    description: Operaciones relacionadas con clientes
paths:

  /customers:
    get:
      tags:
        - Customers
      summary: Obtener todos los clientes
      description: Recupera la lista completa de clientes registrados en el sistema
      operationId: getCustomers
      responses:
        '200':
          description: Lista de clientes recuperada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Customers
      summary: Crear un nuevo cliente
      description: Registra un nuevo cliente en el sistema
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              personalCustomer:
                summary: Ejemplo de cliente personal
                value:
                  name: "María"
                  email: "maria.gonzalez@correo.com"
                  phone: "+51912345678"
                  address: "Jr. Cusco 789, Lima"
                  type: "personal"
                  dni: "87654321"
              businessCustomer:
                summary: Ejemplo de cliente empresarial
                value:
                  name: "Corporación"
                  email: "contacto@corpandina.com"
                  phone: "912345678"
                  address: "Av. Javier Prado 1234, Lima"
                  type: "business"
                  ruc: "20987654321"

      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                personalCustomerResponse:
                  summary: Respuesta de creación de cliente personal
                  value:
                    id: "cust-345678"
                    name: "María"
                    email: "maria.gonzalez@correo.com"
                    phone: "+51912345678"
                    address: "Jr. Cusco 789, Lima"
                    type: "personal"
                    dni: "87654321"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /customers/{customerId}:
    parameters:
      - name: customerId
        in: path
        required: true
        description: Identificador único del cliente
        schema:
          type: string
          pattern: '^[a-zA-Z0-9-]+$'
          minLength: 1
          maxLength: 36
        example: "cust-123456"
    get:
      tags:
        - Customers
      summary: Obtener un cliente por ID
      description: Recupera la información detallada de un cliente específico
      operationId: getCustomerById
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                personalCustomer:
                  summary: Ejemplo de cliente personal
                  value:
                    id: "cust-123456"
                    name: "Juan"
                    email: "juan.perez@ejemplo.com"
                    phone: "+51987654321"
                    address: "Av. Arequipa 123, Lima"
                    type: "personal"
                    dni: "12345678"
                businessCustomer:
                  summary: Ejemplo de cliente empresarial
                  value:
                    id: "cust-789012"
                    name: "Empresa"
                    email: "contacto@empresa.com"
                    phone: "987654321"
                    address: "Av. La Marina 456, Lima"
                    type: "business"
                    ruc: "20123456789"

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Customers
      summary: Actualizar un cliente por ID
      description: Actualiza la información de un cliente existente
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              personalCustomerUpdate:
                summary: Actualización de cliente personal
                value:
                  name: "Juan Carlos"
                  email: "juancarlos.perez@ejemplo.com"
                  phone: "+51987654321"
                  address: "Av. Arequipa 456, Lima"
                  type: "personal"
                  dni: "12345678"
      responses:
        '200':
          description: Cliente actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                personalCustomerUpdated:
                  summary: Cliente personal actualizado
                  value:
                    id: "cust-123456"
                    name: "Juan Carlos"
                    email: "juancarlos.perez@ejemplo.com"
                    phone: "+51987654321"
                    address: "Av. Arequipa 456, Lima"
                    type: "personal"
                    dni: "12345678"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Customers
      summary: Eliminar un cliente por ID
      description: Elimina permanentemente un cliente del sistema
      operationId: deleteCustomer
      responses:
        '204':
          description: Cliente eliminado satisfactoriamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reporting-customer/summary:
    post:
      summary: Generate product report
      description: Generate a complete and general report for a specific bank product within a time interval specified by the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Unique identifier of the bank product
                  example: "prod-123456"
                startDate:
                  type: string
                  format: date-time
                  description: Start date for the report time interval (YYYY-MM-DD)
                endDate:
                  type: string
                  format: date-time
                  description: End date for the report time interval (YYYY-MM-DD)
              required:
                - startDate
                - endDate
                -  productId
      responses:
        '200':
          description: Reporte de productos generado exitosamente
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

components:
  schemas:
    CustomerSubtype:
      type: string
      enum:
        - regular
        - vip
        - pyme
      description: Subtipos disponibles para clientes personales

    Customer:
      type: object
      discriminator:
        propertyName: type
        mapping:
          personal: '#/components/schemas/PersonalCustomer'
          business: '#/components/schemas/BusinessCustomer'
      properties:
        id:
          type: string
          readOnly: true
          pattern: '^[a-zA-Z0-9-]+$'
          maxLength: 36
          example: "cust-123456"
          description: Identificador único del cliente
        subtype:
          $ref: '#/components/schemas/CustomerSubtype'
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: Nombre(s) con primera letra mayúscula
          example: "Juan"
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          maxLength: 100
          description: Correo electrónico válido
          example: "juan.perez@ejemplo.com"
        phone:
          type: string
          pattern: '^(\+51|51)?[9][0-9]{8}$'
          minLength: 9
          maxLength: 12
          description: Número de teléfono peruano (9 dígitos con prefijo opcional +51)
          example: "+51987654321"
        address:
          type: string
          minLength: 5
          maxLength: 200
          description: Dirección completa
          example: "Av. Arequipa 123, Lima"
        type:
          type: string
          enum:
            - personal
            - business
          description: Tipo de cliente
          example: "personal"
      required:
        - name
        - email
        - type
        - phone
        - address

    PersonalCustomer:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            dni:
              type: string
              description: Documento Nacional de Identidad - 8 dígitos
              minLength: 8
              maxLength: 8
              pattern: '^[0-9]{8}$'
              example: "12345678"
          required:
            - dni

    BusinessCustomer:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            ruc:
              type: string
              description: Registro Único de Contribuyentes - 11 dígitos, comienza con 10 o 20
              minLength: 11
              maxLength: 11
              pattern: '^(10|20)[0-9]{9}$'
              example: "20123456789"
          required:
            - ruc


    Error:
      type: object
      properties:
        code:
          type: string
          description: Código de error
          example: "400"
        message:
          type: string
          description: Mensaje descriptivo del error
          example: "Datos inválidos"
        errors:
          type: array
          description: Lista detallada de errores (opcional)
          items:
            type: object
            properties:
              field:
                type: string
                description: Campo con error
              message:
                type: string
                description: Descripción del error
          example:
            - field: "dni"
              message: "El DNI debe contener exactamente 8 dígitos"

  responses:
    BadRequest:
      description: Solicitud inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validationError:
              summary: Error de validación
              value:
                code: "400"
                message: "Datos inválidos"
                errors:
                  - field: "dni"
                    message: "El DNI debe contener exactamente 8 dígitos"
                  - field: "email"
                    message: "Formato de correo electrónico inválido"
    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            unauthorizedError:
              summary: Error de autenticación
              value:
                code: "401"
                message: "No autorizado para acceder a este recurso"
    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            customerNotFound:
              summary: Cliente no encontrado
              value:
                code: "404"
                message: "Cliente con ID cust-123456 no encontrado"
    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            serverError:
              summary: Error de servidor
              value:
                code: "500"
                message: "Error interno del servidor"